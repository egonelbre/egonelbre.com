---
layout: post
title: memrex - sane regexps
category: code
---

{{ page.title }}
================

<p class="meta">04 may 2012</p>

using complex regular expressions is quite complex, 
let's imagine some "trivial" thing you need to match:

    1.3, -1e-50, 1980-05-27, <div>hello</div>

the regular expression for this would be

    [-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?,s+[-+]?[0-9]*.?[0-9]+([eE][-+]?[0-9]+)?,s+(19|20)dd[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01]),s+<div[^>](.*?)</div>

probably...? (also i'm aware that you shouldn't use regexps for matching tags)

then again if we imagined some extensions to the
regexp language it would be trivial:

    [:float],\s+[:float],\s+[:date],\s+[:tag:div]

since we can imagine any number of things we could add 
then let's make adding new definitions as simple as possible...
using a simple declaration:

{% highlight js %}

{
  "tag": "<$1\b[^>](.*?)</$1>",
  "float": "[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?",
  "date": "(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])" // yyyy-mm-dd format
}

{% endhighlight %}

now we just need a function for compiling our
new regexp using this memory. 
i'm using javascript for convenience 
and make some assumptions what can be added as a 
parameter to the subexpression.
(that's me formally explaining that the code doesn't work 
for all cases because i'm too lazy to implement it properly.)

{% highlight js %}

function MemRex(memory){
  this.memory = memory;
}

MemRex.prototype.compile = function(pattern, modifiers){
  var field = /(?:\\\\)*\[:([^\]]*)\]/g,
      memory = this.memory;
  var np = pattern.replace(field, function(substr, match){
    var tokens = match.split(":"),
        field = tokens[0],
        sub = memory[field];
    
    if(typeof sub === "undefined" ){
      throw "Unknown field: '" + field + "'";
    }

    for(var i = 1; i < tokens.length; i += 1){
      var r = RegExp("\\$"+i, "g");
      sub = sub.replace(r, tokens[i]);
    };

    return sub;
  });

  var regex = new RegExp(np, modifiers);
  regex.sane = pattern;
  return regex
}

regs = new MemRex({
  "tag": "<$1\b[^>](.*?)</$1>",
  "float": "[-+]?[0-9]*\.?[0-9]+([eE][-+]?[0-9]+)?",
  "date": "(19|20)\d\d[- /.](0[1-9]|1[012])[- /.](0[1-9]|[12][0-9]|3[01])" // yyyy-mm-dd format
});

regs.compile("[:float],\s+[:float],\s+[:date],\s+[:tag:div]")

{% endhighlight %}

of course now you have to be careful how you defined 
your subexpressions and what exactly you want to match. 
(also i wasn't too much worried about speed.)
... referring to other subexpressions inside a subexpression 
would be nice.

now go make it a proper thing in your language, so i could use it,
i'm too lazy to do it myself.